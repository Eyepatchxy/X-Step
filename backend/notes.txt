http://127.0.0.1:5000

app.py → your Flask API (handles push requests).
passenger_wsgi.py → entry point for Passenger.
requirements.txt → list of dependencies.



from flask import Flask, request, jsonify
import firebase_admin
from firebase_admin import credentials, firestore, messaging, auth

cred = credentials.Certificate("serviceAccountKey.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

app = Flask(__name__)

def verify_id_token_from_header():
    auth_header = request.headers.get("Authorization", "")
    if not auth_header.startswith("Bearer "):
        return None
    token = auth_header.split(" ", 1)[1]
    try:
        decoded = auth.verify_id_token(token)
        return decoded["uid"]
    except Exception:
        return None

@app.post("/send-notification")
def send_notification():
    caller_uid = verify_id_token_from_header()
    if not caller_uid:
        return jsonify({"error":"unauthorized"}), 401

    body = request.get_json(silent=True) or {}
    to_user_id = body.get("toUserId")
    title      = body.get("title")
    msg_body   = body.get("body")
    data       = body.get("data") or {}

    if not to_user_id or not title or not msg_body:
        return jsonify({"error":"missing fields"}), 400

    # Load all tokens for recipient
    tokens = [doc.id for doc in db.collection("users").document(to_user_id).collection("fcmTokens").stream()]
    if not tokens:
        return jsonify({"error":"no tokens for recipient"}), 404

    message = messaging.MulticastMessage(
        notification=messaging.Notification(title=title, body=msg_body),
        data={k: str(v) for k, v in data.items()},
        tokens=tokens,
        android=messaging.AndroidConfig(priority="high"),
        apns=messaging.APNSConfig(headers={"apns-priority":"10"})
    )
    resp = messaging.send_multicast(message)

    # Clean invalid tokens
    to_delete = []
    for i, r in enumerate(resp.responses):
        if not r.success:
            code = getattr(r.exception, "code", "")
            if code in ("registration-token-not-registered", "invalid-argument"):
                to_delete.append(tokens[i])
    if to_delete:
        batch = db.batch()
        for t in to_delete:
            batch.delete(db.collection("users").document(to_user_id).collection("fcmTokens").document(t))
        batch.commit()

    return jsonify({"success": resp.success_count, "failure": resp.failure_count})
